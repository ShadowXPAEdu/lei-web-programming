@model JCAirbnb.Models.Property

@{
    ViewData["Title"] = $"Property {Model.Title}";
}

@section CSS {
    <style type="text/css">
        .review > span {
            margin: 0.2rem;
        }

            .review > span::after {
                content: '•';
            }

            .review > span:last-child::after {
                content: '';
            }

        .property-images {
            height: 450px;
        }

        .property-body {
            margin-bottom: 10px;
        }

        .property-check-in {
            position: -webkit-sticky;
            position: sticky;
            top: 10px !important;
            z-index: 1 !important;
            width: 100% !important;
            display: inline-block !important;
            border: 1px solid rgb(221, 221, 221);
            border-radius: 12px;
            padding: 24px;
            box-shadow: rgba(0, 0, 0, 0.12) 0px 6px 16px;
        }

        .property-price {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .old-price {
            color: gray;
        }

        .per-night {
            font-size: 1rem;
            font-weight: normal;
        }

        .property-commodities > span {
            margin: 0.2rem;
        }

        .property-rating > span {
            margin: 0.2rem;
        }

        .property-review {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .rating-progress-bar {
            display: block;
            width: 100%;
            height: 10px;
            border: 1px solid rgb(221, 221, 221);
        }

        .rating-progress-bar-active {
            display: block;
            background: gray;
            height: 10px;
        }

        .tutorial > p {
            font-size: 0.5rem;
            position: relative;
            top: 0.3rem;
        }

        .comment-header > * {
            margin: 0.4rem;
        }

        .review-image > img {
            width: 50px;
            height: 50px;
        }

        .review-date {
            font-size: 0.8rem;
            color: gray;
        }

        .property-review, .ratings {
            margin-bottom: 1.2rem;
        }

        .comment {
            margin: 1.2rem 0 1.2rem 0;
        }

        .property-check-in-form > * {
            width: 90%;
            margin: 1.2rem auto;
        }

        .property-check-in-btn > input {
            width: 100%;
        }
    </style>
}

<h1>@Html.DisplayFor(model => model.Title)</h1>

<div>
    <div class="review d-inline-flex">
        @{var avg = Model.Ratings.GetAverage();}
        <span>
            @avg.ToString("F2")
        </span>
        <span>
            @{bool halfStar = (avg - ((int)avg) >= 0.5f);}
            @for (int i = 0; i < 5; i++)
            {
                <span class="@(((i + 1) <= avg) ? "fas" : "far") fa-star@(((i) == (int)avg && halfStar) ? "-half-alt fas" : "")"></span>
            }
        </span>
        <span>
            <a href="#reviews">@Model.Reviews.Count Reviews</a>
        </span>
        <span>
            @Html.DisplayFor(model => model.Location)
        </span>
    </div>

    <div class="property-images">

    </div>

    <div class="d-flex property-body">
        <div class="col col-6">
            <div class="property-details">
                <div class="property-header">
                    <h4>@Model.PropertyType.Title hosted by @Model.Manager.UserName</h4>
                    <div class="property-divisions review d-inline-flex">
                        <span>
                            @Html.DisplayFor(model => model.Divisions.Guest) guest@(Model.Divisions.Guest > 1 ? "s" : "")
                        </span>
                        @if (Model.Divisions.Bedroom > 0)
                        {
                            <span>
                                @Html.DisplayFor(model => model.Divisions.Bedroom) bedroom@(Model.Divisions.Bedroom > 1 ? "s" : "")
                            </span>
                        }
                        @if (Model.Divisions.Bed > 0)
                        {
                            <span>
                                @Html.DisplayFor(model => model.Divisions.Bed) bed@(Model.Divisions.Bed > 1 ? "s" : "")
                            </span>
                        }
                        @if (Model.Divisions.Bath > 0)
                        {
                            <span>
                                @Html.DisplayFor(model => model.Divisions.Bath) bath@(Model.Divisions.Bath > 1 ? "s" : "")
                            </span>
                        }
                        @if (Model.Divisions.PrivateBath > 0)
                        {
                            <span>
                                @Html.DisplayFor(model => model.Divisions.PrivateBath) private bath@(Model.Divisions.PrivateBath > 1 ? "s" : "")
                            </span>
                        }
                    </div>
                </div>
                <hr />
                <div class="property-description">
                    @Html.DisplayFor(model => model.Description)
                </div>
                <hr />
                <div class="property-commodities">
                    <h4>What this place offers</h4>
                    <div class="tutorial">
                        <span class="p-2">Included</span><p class="btn btn-sm btn-primary">&nbsp;</p>
                        <span class="p-2">Not included</span><p class="btn btn-sm btn-danger">&nbsp;</p>
                    </div>
                    <div class="property-commodities d-inline-flex flex-wrap">
                        @foreach (var commodity in Model.Commodities)
                        {
                            <span class="btn btn-sm btn-@(commodity.Included ? "primary" : "danger")">
                                @Html.DisplayFor(m => commodity.Commodity.Title)
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col col-1"></div>
        <div class="col col-5">
            <div class="property-check-in d-inline-block">
                <div class="property-check-in-content">
                    <div class="property-price-review d-flex justify-content-between align-items-end">
                        <div class="property-price">
                            @if (Model.BasePrice != Model.Price)
                            {
                                <span class="old-price"><s>€@Html.DisplayFor(model => model.BasePrice)</s></span>
                            }
                            <span class="price">€@Html.DisplayFor(model => model.Price)</span><span class="per-night">/night</span>
                        </div>
                        <div class="review">
                            <span>
                                @avg.ToString("F2")
                            </span><span><a href="#reviews">@Model.Reviews.Count Reviews</a></span>
                        </div>
                    </div>
                    <form method="get" asp-area="Client" asp-controller="" asp-action="Reserve" asp-route-id="@Model.Id">
                        <div class="property-check-in-form">
                            <div class="property-dates d-flex justify-content-around">
                                <div class="d-flex flex-column">
                                    <label for="checkIn">Check-in:</label>
                                    <input type="date" id="checkIn" name="checkIn" />
                                </div>
                                <div class="d-flex flex-column">
                                    <label for="checkOut">Check-out:</label>
                                    <input type="date" id="checkOut" name="checkOut" />
                                </div>
                            </div>
                            <div class="property-check-in-btn">
                                <input type="submit" value="Reserve" class="btn btn-success" />
                            </div>
                            <hr />
                            <div class="w-75 property-check-in-total d-flex justify-content-between">
                                <span class="font-weight-bold">Total</span>
                                <span>€<span id="price">@Html.DisplayFor(m => m.Price)</span></span>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<hr />
<div id="reviews" class="reviews">
    <div class="reviews-header">
        <div class="review d-inline-flex property-review">
            <span>
                @avg.ToString("F2")
            </span>
            <span>
                @Model.Reviews.Count Reviews
            </span>
        </div>
        <div class="ratings d-flex justify-content-between">
            <div class="d-inline-flex flex-column col col-6">
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.Cleanliness)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.Cleanliness)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.Cleanliness / 5.0f) * 100)%;"></span></span>
                </span>
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.Communication)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.Communication)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.Communication / 5.0f) * 100)%;"></span></span>
                </span>
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.CheckIn)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.CheckIn)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.CheckIn / 5.0f) * 100)%;"></span></span>
                </span>
            </div>
            <div class="d-inline-flex flex-column justify-content-between col col-6">
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.Accuracy)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.Accuracy)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.Accuracy / 5.0f) * 100)%;"></span></span>
                </span>
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.Location)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.Location)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.Location / 5.0f) * 100)%;"></span></span>
                </span>
                <span class="property-rating">
                    <span class="review">
                        <span class="rating-label">
                            @Html.DisplayNameFor(m => m.Ratings.Value)
                        </span>
                        <span class="rating-value">
                            @Html.DisplayFor(m => m.Ratings.Value)
                        </span>
                    </span>
                    <span class="rating-progress-bar"><span class="rating-progress-bar-active" style="width:@((Model.Ratings.Value / 5.0f) * 100)%;"></span></span>
                </span>
            </div>
        </div>
    </div>
    <div class="reviews-comments d-flex justify-content-between flex-wrap">
        @foreach (var review in Model.Reviews.OrderByDescending(r => r.Date))
        {
            <div class="comment col col-6">
                <div class="comment-header d-flex flex-row">
                    <div class="review-image">
                        <img src="~/img/avatar.webp" />
                    </div>
                    <div class="d-flex flex-column">
                        <div class="review-reviewer">@review.User.UserName</div>
                        <div class="review-date">@review.Date.ToLongDateString()</div>
                    </div>
                </div>
                <div class="review-text">
                    @review.Text
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        function onDateChange() {
            const checkIn = $("#checkIn");
            const checkOut = $("#checkOut");

            let checkInVal = checkIn[0].value.toString().replaceAll('-', '');
            let checkOutVal = checkOut[0].value.toString().replaceAll('-', '');

            if (checkOutVal <= checkInVal)
                checkOut[0].value = new Date(Date.parse(checkIn[0].value) + 86400000).toISOString().split('T')[0];

            checkInVal = checkIn[0].value.toString().replaceAll('-', '');
            checkOutVal = checkOut[0].value.toString().replaceAll('-', '');

            const difference = checkOutVal - checkInVal;
            const price = (difference * @Model.Price);
            $("#price").text(price);
        }

        $(function () {
            const checkIn = $("#checkIn");
            const checkOut = $("#checkOut");
            checkIn.on("input", function () { onDateChange() });
            checkOut.on("input", function () { onDateChange() });
            checkIn[0].value = new Date().toISOString().split('T')[0];
            checkOut[0].value = new Date(Date.parse(checkIn[0].value) + 86400000).toISOString().split('T')[0];
        });
    </script>
}
